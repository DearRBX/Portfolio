--[[
 ________  _______   ________  ________     
|\   ___ \|\  ___ \ |\   __  \|\   __  \    
\ \  \_|\ \ \   __/|\ \  \|\  \ \  \|\  \   
 \ \  \ \\ \ \  \_|/_\ \   __  \ \   _  _\  
  \ \  \_\\ \ \  \_|\ \ \  \ \  \ \  \\  \| 
   \ \_______\ \_______\ \__\ \__\ \__\\ _\ 
    \|_______|\|_______|\|__|\|__|\|__|\|__|
    
    CODED BY D_EAR 
    PROFILE: https://www.roblox.com/users/166535553/profile                                                                                        
]]

local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ReplicatedFirst = game:GetService("ReplicatedFirst")
local WorkSpace = game:GetService("Workspace")
local DataStoreService = game:GetService("DataStoreService")
local ServerStorage = game:GetService("ServerStorage")

local Events, Modules, Storage, PStats = ReplicatedStorage:WaitForChild("Events"), ReplicatedStorage:WaitForChild("Modules"), ReplicatedStorage:WaitForChild("Storage"), ReplicatedStorage:WaitForChild("PlayerStats")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local Resources = ServerStorage:WaitForChild("Resources")
local Sounds = Resources:WaitForChild("Sounds")

local RemoteRenames = {
	["FallDamage"] = {Name = "FLDLAGJS"};
	["GetDescription"] = {Name = "__GHD"};
}

local FallDamageRemote = Remotes:WaitForChild("FallDamage")
local GetDescriptionRemote = Remotes:WaitForChild("GetDescription")

local FDK = script:WaitForChild("FDK").Value
local REK = script:WaitForChild("REK").Value

local function VerifyLegitimacy(Player, Part, Velocity)
	local GetPlayerStat = PStats:WaitForChild(Player.Name)
	if not GetPlayerStat then
		warn("Event-Handler: "..tostring(Player).." does not have a statistic.")
		return false
	end
	if GetPlayerStat:WaitForChild("Ragdolled").Value == false then
		warn("Event-Handler: "..tostring(Player).." is not ragdolled, so request was cancelled.")
		return false
	end
	return true
end

local function FindPlayerStat(Player)
	if Player and PStats:FindFirstChild(Player.Name) then
		return PStats:FindFirstChild(Player.Name)
	end
end

local function HandleFallDamage(Player, HitPart, Part, Velocity)
	if Part and typeof(Part) == "Instance" and typeof(Velocity) == "number" and typeof(HitPart) == "Instance" and VerifyLegitimacy(Player, Part, Velocity) then
		if FindPlayerStat(Player):WaitForChild("Modifiers"):FindFirstChild("M__D") and not FindPlayerStat(Player):WaitForChild("Modifiers"):FindFirstChild("M__Dr") then
			local new_Modifier = Instance.new("Folder")
			new_Modifier.Name = "M__Dr"
			new_Modifier.Parent = FindPlayerStat(Player):WaitForChild("Modifiers")
			local current_Modifier = FindPlayerStat(Player):WaitForChild("Modifiers"):FindFirstChild("M__D")
			if current_Modifier then
				new_Modifier:Destroy()
				delay(2, function()
					current_Modifier:Destroy()
					if not FindPlayerStat(Player):WaitForChild("Modifiers"):FindFirstChild("M__D") then
						new_Modifier:Destroy()
					end					
				end)
			end
		end
		if Velocity > 15 and Velocity < 55 and not FindPlayerStat(Player):WaitForChild("Modifiers"):FindFirstChild("N_FD") then
			pcall(function()
				local FallSmall = Sounds.FallDamage.Small.FallSmall:Clone()
				FallSmall.Parent = Player.Character.Torso
				FallSmall:Play()
				game.Debris:AddItem(FallSmall, FallSmall.TimeLength / FallSmall.PlaybackSpeed)
			end)
		elseif Velocity > 55 and Velocity < 130 then
			if not FindPlayerStat(Player):WaitForChild("Modifiers"):FindFirstChild("N_FD") then
				local Humanoid = Player.Character:WaitForChild("Humanoid")
				local SoundF = Sounds.FallDamage.Medium:GetChildren()
				
				local FL = Instance.new("BoolValue")
				FL.Name = "N_FD"
				FL.Parent = FindPlayerStat(Player):WaitForChild("Modifiers")
				game.Debris:AddItem(FL, 0.2)

				
				Humanoid:TakeDamage((Velocity / 10))


				local LimbHealth = FindPlayerStat(Player):WaitForChild("HealthValues"):FindFirstChild(HitPart.Name)
				
				if LimbHealth then
					if not LimbHealth.Broken.Value then
						LimbHealth.Value -= (Velocity / 8)
					end
				end
				
				if HitPart.Name == "Head" then
					Remotes.ShellShock:FireClient(Player, 5, 2, true)
				end

				local Sound = SoundF[math.random(1, #SoundF)]:Clone()
				Sound.Parent = Player.Character:WaitForChild("Torso")
				Sound:Play()
				game:GetService("Debris"):AddItem(Sound, 3)
			end
		elseif Velocity > 130 then
			if not FindPlayerStat(Player):WaitForChild("Modifiers"):FindFirstChild("N_FD") then
				local Humanoid = Player.Character:WaitForChild("Humanoid")
				local SoundF = Sounds.FallDamage.Medium:GetChildren()

				local FL = Instance.new("BoolValue")
				FL.Name = "N_FD"
				FL.Parent = FindPlayerStat(Player):WaitForChild("Modifiers")
				game.Debris:AddItem(FL, 0.2)

				Humanoid:TakeDamage((Velocity / 8))
				
				_G.Ragdoll(Player.Character:WaitForChild("Humanoid"), 4)

				local LimbHealth = FindPlayerStat(Player):WaitForChild("HealthValues"):FindFirstChild(HitPart.Name)

				if LimbHealth then
					if not LimbHealth.Broken.Value then
						LimbHealth.Value -= (Velocity / 7)
					end
				end
				
				if HitPart.Name == "Head" then
					Remotes.ShellShock:FireClient(Player, 5, 2, true)
				end

				local Sound = SoundF[math.random(1, #SoundF)]:Clone()
				Sound.Parent = Player.Character:WaitForChild("Torso")
				Sound:Play()
				game:GetService("Debris"):AddItem(Sound, 3)
			end
		end
		
	end
end

local function HandleRagdoll(P)
	if PStats:FindFirstChild(P.Name).Ragdolled.Value == false then
		local PlayerStatistics = PStats:FindFirstChild(P.Name)
		local Modifier = PlayerStatistics:WaitForChild("Modifiers")
		local new_Modifier = Instance.new("Folder")
		new_Modifier.Name = "M__D"
		new_Modifier.Parent = Modifier
		
		_G.Ragdoll(P.Character:WaitForChild("Humanoid"), "HaltedTilFurther")
				
		local Screams = Resources.Sounds:WaitForChild("Screams"):GetChildren()
		local Scream = Screams[math.random(1, #Screams)]:Clone()
		Scream.Parent = P.Character.PrimaryPart
		Scream.Name = "Vocal__"
		Scream:Play()
		game:GetService("Debris"):AddItem(Scream, 3)
	end
end

FallDamageRemote.OnServerEvent:Connect(function(P, X1, X2, X3, X4)
	if X1 == FDK then
		HandleFallDamage(P, X2, X3, X4)
		return
	end
	if X1 == REK then
		if X2 ~= "aMM2TLA61" then
			P:Kick("Account Status Updated")
			return
		end
		HandleRagdoll(P, X1)
		return
	end
end)

for _, Encrypt in pairs(Remotes:GetChildren()) do 
	if RemoteRenames[Encrypt.Name] then
		Encrypt.Name = RemoteRenames[Encrypt.Name]["Name"]
	end
end
